// ------------------------------------------------------------------------------
//  Copyright (c) 2016 Microsoft Corporation
//  
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//  
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.


namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Device.
    /// </summary>
    [DataContract]
    public partial class Device : DirectoryObject
    {
    
        /// <summary>
        /// Gets or sets account enabled.
        /// </summary>
        [DataMember(Name = "accountEnabled", EmitDefaultValue = false, IsRequired = false)]
        public bool? AccountEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets alternative security ids.
        /// </summary>
        [DataMember(Name = "alternativeSecurityIds", EmitDefaultValue = false, IsRequired = false)]
        public IEnumerable<AlternativeSecurityId> AlternativeSecurityIds { get; set; }
    
        /// <summary>
        /// Gets or sets approximate last sign in date time.
        /// </summary>
        [DataMember(Name = "approximateLastSignInDateTime", EmitDefaultValue = false, IsRequired = false)]
        public DateTimeOffset? ApproximateLastSignInDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets device id.
        /// </summary>
        [DataMember(Name = "deviceId", EmitDefaultValue = false, IsRequired = false)]
        public string DeviceId { get; set; }
    
        /// <summary>
        /// Gets or sets device metadata.
        /// </summary>
        [DataMember(Name = "deviceMetadata", EmitDefaultValue = false, IsRequired = false)]
        public string DeviceMetadata { get; set; }
    
        /// <summary>
        /// Gets or sets device version.
        /// </summary>
        [DataMember(Name = "deviceVersion", EmitDefaultValue = false, IsRequired = false)]
        public Int32? DeviceVersion { get; set; }
    
        /// <summary>
        /// Gets or sets display name.
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false, IsRequired = false)]
        public string DisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets is compliant.
        /// </summary>
        [DataMember(Name = "isCompliant", EmitDefaultValue = false, IsRequired = false)]
        public bool? IsCompliant { get; set; }
    
        /// <summary>
        /// Gets or sets is managed.
        /// </summary>
        [DataMember(Name = "isManaged", EmitDefaultValue = false, IsRequired = false)]
        public bool? IsManaged { get; set; }
    
        /// <summary>
        /// Gets or sets on premises last sync date time.
        /// </summary>
        [DataMember(Name = "onPremisesLastSyncDateTime", EmitDefaultValue = false, IsRequired = false)]
        public DateTimeOffset? OnPremisesLastSyncDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets on premises sync enabled.
        /// </summary>
        [DataMember(Name = "onPremisesSyncEnabled", EmitDefaultValue = false, IsRequired = false)]
        public bool? OnPremisesSyncEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets operating system.
        /// </summary>
        [DataMember(Name = "operatingSystem", EmitDefaultValue = false, IsRequired = false)]
        public string OperatingSystem { get; set; }
    
        /// <summary>
        /// Gets or sets operating system version.
        /// </summary>
        [DataMember(Name = "operatingSystemVersion", EmitDefaultValue = false, IsRequired = false)]
        public string OperatingSystemVersion { get; set; }
    
        /// <summary>
        /// Gets or sets physical ids.
        /// </summary>
        [DataMember(Name = "physicalIds", EmitDefaultValue = false, IsRequired = false)]
        public IEnumerable<string> PhysicalIds { get; set; }
    
        /// <summary>
        /// Gets or sets trust type.
        /// </summary>
        [DataMember(Name = "trustType", EmitDefaultValue = false, IsRequired = false)]
        public string TrustType { get; set; }
    
        /// <summary>
        /// Gets or sets registered owners.
        /// </summary>
        [DataMember(Name = "registeredOwners", EmitDefaultValue = false, IsRequired = false)]
        [JsonConverter(typeof(InterfaceConverter<RegisteredOwnersCollectionWithReferencesPage>))]
        public IRegisteredOwnersCollectionWithReferencesPage RegisteredOwners { get; set; }
    
        /// <summary>
        /// Gets or sets registered users.
        /// </summary>
        [DataMember(Name = "registeredUsers", EmitDefaultValue = false, IsRequired = false)]
        [JsonConverter(typeof(InterfaceConverter<RegisteredUsersCollectionWithReferencesPage>))]
        public IRegisteredUsersCollectionWithReferencesPage RegisteredUsers { get; set; }
    
    }
}

