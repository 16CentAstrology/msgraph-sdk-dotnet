// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Domain.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class Domain : Entity
    {
    
        /// <summary>
        /// Gets or sets authentication type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "authenticationType", Required = Newtonsoft.Json.Required.Default)]
        public string AuthenticationType { get; set; }
    
        /// <summary>
        /// Gets or sets availability status.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "availabilityStatus", Required = Newtonsoft.Json.Required.Default)]
        public string AvailabilityStatus { get; set; }
    
        /// <summary>
        /// Gets or sets is admin managed.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isAdminManaged", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsAdminManaged { get; set; }
    
        /// <summary>
        /// Gets or sets is default.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isDefault", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsDefault { get; set; }
    
        /// <summary>
        /// Gets or sets is initial.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isInitial", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsInitial { get; set; }
    
        /// <summary>
        /// Gets or sets is root.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isRoot", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsRoot { get; set; }
    
        /// <summary>
        /// Gets or sets is verified.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isVerified", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsVerified { get; set; }
    
        /// <summary>
        /// Gets or sets supported services.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "supportedServices", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> SupportedServices { get; set; }
    
        /// <summary>
        /// Gets or sets state.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "state", Required = Newtonsoft.Json.Required.Default)]
        public DomainState State { get; set; }
    
        /// <summary>
        /// Gets or sets service configuration records.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "serviceConfigurationRecords", Required = Newtonsoft.Json.Required.Default)]
        public IDomainServiceConfigurationRecordsCollectionPage ServiceConfigurationRecords { get; set; }
    
        /// <summary>
        /// Gets or sets verification dns records.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "verificationDnsRecords", Required = Newtonsoft.Json.Required.Default)]
        public IDomainVerificationDnsRecordsCollectionPage VerificationDnsRecords { get; set; }
    
        /// <summary>
        /// Gets or sets domain name references.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "domainNameReferences", Required = Newtonsoft.Json.Required.Default)]
        public IDomainDomainNameReferencesCollectionWithReferencesPage DomainNameReferences { get; set; }
    
    }
}

