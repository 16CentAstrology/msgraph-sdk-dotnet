// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Audio.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class Audio
    {
    
        /// <summary>
        /// Gets or sets album.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "album", Required = Newtonsoft.Json.Required.Default)]
        public string Album { get; set; }
    
        /// <summary>
        /// Gets or sets albumArtist.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "albumArtist", Required = Newtonsoft.Json.Required.Default)]
        public string AlbumArtist { get; set; }
    
        /// <summary>
        /// Gets or sets artist.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "artist", Required = Newtonsoft.Json.Required.Default)]
        public string Artist { get; set; }
    
        /// <summary>
        /// Gets or sets bitrate.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "bitrate", Required = Newtonsoft.Json.Required.Default)]
        public Int64? Bitrate { get; set; }
    
        /// <summary>
        /// Gets or sets composers.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "composers", Required = Newtonsoft.Json.Required.Default)]
        public string Composers { get; set; }
    
        /// <summary>
        /// Gets or sets copyright.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "copyright", Required = Newtonsoft.Json.Required.Default)]
        public string Copyright { get; set; }
    
        /// <summary>
        /// Gets or sets disc.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "disc", Required = Newtonsoft.Json.Required.Default)]
        public Int16? Disc { get; set; }
    
        /// <summary>
        /// Gets or sets discCount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "discCount", Required = Newtonsoft.Json.Required.Default)]
        public Int16? DiscCount { get; set; }
    
        /// <summary>
        /// Gets or sets duration.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "duration", Required = Newtonsoft.Json.Required.Default)]
        public Int64? Duration { get; set; }
    
        /// <summary>
        /// Gets or sets genre.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "genre", Required = Newtonsoft.Json.Required.Default)]
        public string Genre { get; set; }
    
        /// <summary>
        /// Gets or sets hasDrm.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "hasDrm", Required = Newtonsoft.Json.Required.Default)]
        public bool? HasDrm { get; set; }
    
        /// <summary>
        /// Gets or sets isVariableBitrate.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isVariableBitrate", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsVariableBitrate { get; set; }
    
        /// <summary>
        /// Gets or sets title.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "title", Required = Newtonsoft.Json.Required.Default)]
        public string Title { get; set; }
    
        /// <summary>
        /// Gets or sets track.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "track", Required = Newtonsoft.Json.Required.Default)]
        public Int32? Track { get; set; }
    
        /// <summary>
        /// Gets or sets trackCount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "trackCount", Required = Newtonsoft.Json.Required.Default)]
        public Int32? TrackCount { get; set; }
    
        /// <summary>
        /// Gets or sets year.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "year", Required = Newtonsoft.Json.Required.Default)]
        public Int32? Year { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }
    
    }
}
