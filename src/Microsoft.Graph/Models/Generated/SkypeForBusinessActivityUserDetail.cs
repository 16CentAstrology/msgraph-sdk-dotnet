// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type SkypeForBusinessActivityUserDetail.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class SkypeForBusinessActivityUserDetail
    {
    
        /// <summary>
        /// Gets or sets totalPeerToPeerSessionCount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "totalPeerToPeerSessionCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? TotalPeerToPeerSessionCount { get; set; }
    
        /// <summary>
        /// Gets or sets totalOrganizedConferenceCount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "totalOrganizedConferenceCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? TotalOrganizedConferenceCount { get; set; }
    
        /// <summary>
        /// Gets or sets totalParticipatedConferenceCount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "totalParticipatedConferenceCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? TotalParticipatedConferenceCount { get; set; }
    
        /// <summary>
        /// Gets or sets peerToPeerLastActivityDate.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "peerToPeerLastActivityDate", Required = Newtonsoft.Json.Required.Default)]
        public Date PeerToPeerLastActivityDate { get; set; }
    
        /// <summary>
        /// Gets or sets organizedConferenceLastActivityDate.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "organizedConferenceLastActivityDate", Required = Newtonsoft.Json.Required.Default)]
        public Date OrganizedConferenceLastActivityDate { get; set; }
    
        /// <summary>
        /// Gets or sets participatedConferenceLastActivityDate.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "participatedConferenceLastActivityDate", Required = Newtonsoft.Json.Required.Default)]
        public Date ParticipatedConferenceLastActivityDate { get; set; }
    
        /// <summary>
        /// Gets or sets peerToPeerIMCount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "peerToPeerIMCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? PeerToPeerIMCount { get; set; }
    
        /// <summary>
        /// Gets or sets peerToPeerAudioCount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "peerToPeerAudioCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? PeerToPeerAudioCount { get; set; }
    
        /// <summary>
        /// Gets or sets peerToPeerAudioMinutes.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "peerToPeerAudioMinutes", Required = Newtonsoft.Json.Required.Default)]
        public Int64? PeerToPeerAudioMinutes { get; set; }
    
        /// <summary>
        /// Gets or sets peerToPeerVideoCount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "peerToPeerVideoCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? PeerToPeerVideoCount { get; set; }
    
        /// <summary>
        /// Gets or sets peerToPeerVideoMinutes.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "peerToPeerVideoMinutes", Required = Newtonsoft.Json.Required.Default)]
        public Int64? PeerToPeerVideoMinutes { get; set; }
    
        /// <summary>
        /// Gets or sets peerToPeerAppSharingCount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "peerToPeerAppSharingCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? PeerToPeerAppSharingCount { get; set; }
    
        /// <summary>
        /// Gets or sets peerToPeerFileTransferCount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "peerToPeerFileTransferCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? PeerToPeerFileTransferCount { get; set; }
    
        /// <summary>
        /// Gets or sets organizedConferenceIMCount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "organizedConferenceIMCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? OrganizedConferenceIMCount { get; set; }
    
        /// <summary>
        /// Gets or sets organizedConferenceAudioVideoCount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "organizedConferenceAudioVideoCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? OrganizedConferenceAudioVideoCount { get; set; }
    
        /// <summary>
        /// Gets or sets organizedConferenceAudioVideoMinutes.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "organizedConferenceAudioVideoMinutes", Required = Newtonsoft.Json.Required.Default)]
        public Int64? OrganizedConferenceAudioVideoMinutes { get; set; }
    
        /// <summary>
        /// Gets or sets organizedConferenceAppSharingCount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "organizedConferenceAppSharingCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? OrganizedConferenceAppSharingCount { get; set; }
    
        /// <summary>
        /// Gets or sets organizedConferenceWebCount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "organizedConferenceWebCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? OrganizedConferenceWebCount { get; set; }
    
        /// <summary>
        /// Gets or sets organizedConferenceDialInOut3rdPartyCount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "organizedConferenceDialInOut3rdPartyCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? OrganizedConferenceDialInOut3rdPartyCount { get; set; }
    
        /// <summary>
        /// Gets or sets organizedConferenceCloudDialInOutMicrosoftCount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "organizedConferenceCloudDialInOutMicrosoftCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? OrganizedConferenceCloudDialInOutMicrosoftCount { get; set; }
    
        /// <summary>
        /// Gets or sets organizedConferenceCloudDialInMicrosoftMinutes.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "organizedConferenceCloudDialInMicrosoftMinutes", Required = Newtonsoft.Json.Required.Default)]
        public Int64? OrganizedConferenceCloudDialInMicrosoftMinutes { get; set; }
    
        /// <summary>
        /// Gets or sets organizedConferenceCloudDialOutMicrosoftMinutes.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "organizedConferenceCloudDialOutMicrosoftMinutes", Required = Newtonsoft.Json.Required.Default)]
        public Int64? OrganizedConferenceCloudDialOutMicrosoftMinutes { get; set; }
    
        /// <summary>
        /// Gets or sets participantedConferenceIMCount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "participantedConferenceIMCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? ParticipantedConferenceIMCount { get; set; }
    
        /// <summary>
        /// Gets or sets participantedConferenceAudioVideoCount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "participantedConferenceAudioVideoCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? ParticipantedConferenceAudioVideoCount { get; set; }
    
        /// <summary>
        /// Gets or sets participantedConferenceAudioVideoMinutes.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "participantedConferenceAudioVideoMinutes", Required = Newtonsoft.Json.Required.Default)]
        public Int64? ParticipantedConferenceAudioVideoMinutes { get; set; }
    
        /// <summary>
        /// Gets or sets participantedConferenceAppSharingCount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "participantedConferenceAppSharingCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? ParticipantedConferenceAppSharingCount { get; set; }
    
        /// <summary>
        /// Gets or sets participantedConferenceWebCount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "participantedConferenceWebCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? ParticipantedConferenceWebCount { get; set; }
    
        /// <summary>
        /// Gets or sets participantedConferenceDialInOut3rdPartyCount.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "participantedConferenceDialInOut3rdPartyCount", Required = Newtonsoft.Json.Required.Default)]
        public Int64? ParticipantedConferenceDialInOut3rdPartyCount { get; set; }
    
        /// <summary>
        /// Gets or sets reportRefreshDate.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "reportRefreshDate", Required = Newtonsoft.Json.Required.Default)]
        public Date ReportRefreshDate { get; set; }
    
        /// <summary>
        /// Gets or sets userPrincipalName.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "userPrincipalName", Required = Newtonsoft.Json.Required.Default)]
        public string UserPrincipalName { get; set; }
    
        /// <summary>
        /// Gets or sets isDeleted.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isDeleted", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsDeleted { get; set; }
    
        /// <summary>
        /// Gets or sets deletedDate.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deletedDate", Required = Newtonsoft.Json.Required.Default)]
        public Date DeletedDate { get; set; }
    
        /// <summary>
        /// Gets or sets lastActivityDate.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lastActivityDate", Required = Newtonsoft.Json.Required.Default)]
        public Date LastActivityDate { get; set; }
    
        /// <summary>
        /// Gets or sets assignedProducts.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "assignedProducts", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> AssignedProducts { get; set; }
    
        /// <summary>
        /// Gets or sets reportPeriod.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "reportPeriod", Required = Newtonsoft.Json.Required.Default)]
        public string ReportPeriod { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }
    
    }
}
