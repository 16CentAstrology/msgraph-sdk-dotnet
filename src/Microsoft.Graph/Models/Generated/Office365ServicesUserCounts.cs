// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.

// Template Source: Templates\CSharp\Model\ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Office365ServicesUserCounts.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    [JsonConverter(typeof(DerivedTypeConverter))]
    public partial class Office365ServicesUserCounts
    {
    
        /// <summary>
        /// Gets or sets reportRefreshDate.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "reportRefreshDate", Required = Newtonsoft.Json.Required.Default)]
        public Date ReportRefreshDate { get; set; }
    
        /// <summary>
        /// Gets or sets exchangeActive.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "exchangeActive", Required = Newtonsoft.Json.Required.Default)]
        public Int64? ExchangeActive { get; set; }
    
        /// <summary>
        /// Gets or sets exchangeInactive.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "exchangeInactive", Required = Newtonsoft.Json.Required.Default)]
        public Int64? ExchangeInactive { get; set; }
    
        /// <summary>
        /// Gets or sets oneDriveActive.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "oneDriveActive", Required = Newtonsoft.Json.Required.Default)]
        public Int64? OneDriveActive { get; set; }
    
        /// <summary>
        /// Gets or sets oneDriveInactive.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "oneDriveInactive", Required = Newtonsoft.Json.Required.Default)]
        public Int64? OneDriveInactive { get; set; }
    
        /// <summary>
        /// Gets or sets sharePointActive.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "sharePointActive", Required = Newtonsoft.Json.Required.Default)]
        public Int64? SharePointActive { get; set; }
    
        /// <summary>
        /// Gets or sets sharePointInactive.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "sharePointInactive", Required = Newtonsoft.Json.Required.Default)]
        public Int64? SharePointInactive { get; set; }
    
        /// <summary>
        /// Gets or sets skypeForBusinessActive.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "skypeForBusinessActive", Required = Newtonsoft.Json.Required.Default)]
        public Int64? SkypeForBusinessActive { get; set; }
    
        /// <summary>
        /// Gets or sets skypeForBusinessInactive.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "skypeForBusinessInactive", Required = Newtonsoft.Json.Required.Default)]
        public Int64? SkypeForBusinessInactive { get; set; }
    
        /// <summary>
        /// Gets or sets yammerActive.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "yammerActive", Required = Newtonsoft.Json.Required.Default)]
        public Int64? YammerActive { get; set; }
    
        /// <summary>
        /// Gets or sets yammerInactive.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "yammerInactive", Required = Newtonsoft.Json.Required.Default)]
        public Int64? YammerInactive { get; set; }
    
        /// <summary>
        /// Gets or sets reportPeriod.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "reportPeriod", Required = Newtonsoft.Json.Required.Default)]
        public string ReportPeriod { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData(ReadData = true)]
        public IDictionary<string, object> AdditionalData { get; set; }
    
    }
}
