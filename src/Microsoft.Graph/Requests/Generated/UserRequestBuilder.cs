// ------------------------------------------------------------------------------
//  Copyright (c) 2016 Microsoft Corporation
//  
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//  
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.


namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;

    /// <summary>
    /// The type UserRequestBuilder.
    /// </summary>
    public partial class UserRequestBuilder : BaseRequestBuilder, IUserRequestBuilder
    {

        /// <summary>
        /// Constructs a new UserRequestBuilder.
        /// </summary>
        /// <param name="requestUrl">The URL for the built request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        public UserRequestBuilder(
            string requestUrl,
            IBaseClient client)
            : base(requestUrl, client)
        {
        }

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <returns>The built request.</returns>
        public IUserRequest Request()
        {
            return this.Request(null);
        }

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>The built request.</returns>
        public IUserRequest Request(IList<Option> options)
        {
            return new UserRequest(this.RequestUrl, this.Client, options);
        }
        
        /// <summary>
        /// Gets the request builder for OwnedDevices.
        /// </summary>
        /// <returns>The <see cref="IOwnedDevicesCollectionWithReferencesRequestBuilder"/>.</returns>
        public IOwnedDevicesCollectionWithReferencesRequestBuilder OwnedDevices
        {
            get
            {
                return new OwnedDevicesCollectionWithReferencesRequestBuilder(this.AppendSegmentToRequestUrl("ownedDevices"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for RegisteredDevices.
        /// </summary>
        /// <returns>The <see cref="IRegisteredDevicesCollectionWithReferencesRequestBuilder"/>.</returns>
        public IRegisteredDevicesCollectionWithReferencesRequestBuilder RegisteredDevices
        {
            get
            {
                return new RegisteredDevicesCollectionWithReferencesRequestBuilder(this.AppendSegmentToRequestUrl("registeredDevices"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Manager.
        /// </summary>
        /// <returns>The <see cref="IDirectoryObjectWithReferencesRequestBuilder"/>.</returns>
        public IDirectoryObjectWithReferencesRequestBuilder Manager
        {
            get
            {
                return new DirectoryObjectWithReferencesRequestBuilder(this.AppendSegmentToRequestUrl("manager"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for DirectReports.
        /// </summary>
        /// <returns>The <see cref="IDirectReportsCollectionWithReferencesRequestBuilder"/>.</returns>
        public IDirectReportsCollectionWithReferencesRequestBuilder DirectReports
        {
            get
            {
                return new DirectReportsCollectionWithReferencesRequestBuilder(this.AppendSegmentToRequestUrl("directReports"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for MemberOf.
        /// </summary>
        /// <returns>The <see cref="IMemberOfCollectionWithReferencesRequestBuilder"/>.</returns>
        public IMemberOfCollectionWithReferencesRequestBuilder MemberOf
        {
            get
            {
                return new MemberOfCollectionWithReferencesRequestBuilder(this.AppendSegmentToRequestUrl("memberOf"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for CreatedObjects.
        /// </summary>
        /// <returns>The <see cref="ICreatedObjectsCollectionWithReferencesRequestBuilder"/>.</returns>
        public ICreatedObjectsCollectionWithReferencesRequestBuilder CreatedObjects
        {
            get
            {
                return new CreatedObjectsCollectionWithReferencesRequestBuilder(this.AppendSegmentToRequestUrl("createdObjects"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for OwnedObjects.
        /// </summary>
        /// <returns>The <see cref="IOwnedObjectsCollectionWithReferencesRequestBuilder"/>.</returns>
        public IOwnedObjectsCollectionWithReferencesRequestBuilder OwnedObjects
        {
            get
            {
                return new OwnedObjectsCollectionWithReferencesRequestBuilder(this.AppendSegmentToRequestUrl("ownedObjects"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Messages.
        /// </summary>
        /// <returns>The <see cref="IMessagesCollectionRequestBuilder"/>.</returns>
        public IMessagesCollectionRequestBuilder Messages
        {
            get
            {
                return new MessagesCollectionRequestBuilder(this.AppendSegmentToRequestUrl("messages"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for MailFolders.
        /// </summary>
        /// <returns>The <see cref="IMailFoldersCollectionRequestBuilder"/>.</returns>
        public IMailFoldersCollectionRequestBuilder MailFolders
        {
            get
            {
                return new MailFoldersCollectionRequestBuilder(this.AppendSegmentToRequestUrl("mailFolders"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Calendar.
        /// </summary>
        /// <returns>The <see cref="ICalendarRequestBuilder"/>.</returns>
        public ICalendarRequestBuilder Calendar
        {
            get
            {
                return new CalendarRequestBuilder(this.AppendSegmentToRequestUrl("calendar"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Calendars.
        /// </summary>
        /// <returns>The <see cref="ICalendarsCollectionRequestBuilder"/>.</returns>
        public ICalendarsCollectionRequestBuilder Calendars
        {
            get
            {
                return new CalendarsCollectionRequestBuilder(this.AppendSegmentToRequestUrl("calendars"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for CalendarGroups.
        /// </summary>
        /// <returns>The <see cref="ICalendarGroupsCollectionRequestBuilder"/>.</returns>
        public ICalendarGroupsCollectionRequestBuilder CalendarGroups
        {
            get
            {
                return new CalendarGroupsCollectionRequestBuilder(this.AppendSegmentToRequestUrl("calendarGroups"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for CalendarView.
        /// </summary>
        /// <returns>The <see cref="ICalendarViewCollectionRequestBuilder"/>.</returns>
        public ICalendarViewCollectionRequestBuilder CalendarView
        {
            get
            {
                return new CalendarViewCollectionRequestBuilder(this.AppendSegmentToRequestUrl("calendarView"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Events.
        /// </summary>
        /// <returns>The <see cref="IEventsCollectionRequestBuilder"/>.</returns>
        public IEventsCollectionRequestBuilder Events
        {
            get
            {
                return new EventsCollectionRequestBuilder(this.AppendSegmentToRequestUrl("events"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Contacts.
        /// </summary>
        /// <returns>The <see cref="IContactsCollectionRequestBuilder"/>.</returns>
        public IContactsCollectionRequestBuilder Contacts
        {
            get
            {
                return new ContactsCollectionRequestBuilder(this.AppendSegmentToRequestUrl("contacts"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for ContactFolders.
        /// </summary>
        /// <returns>The <see cref="IContactFoldersCollectionRequestBuilder"/>.</returns>
        public IContactFoldersCollectionRequestBuilder ContactFolders
        {
            get
            {
                return new ContactFoldersCollectionRequestBuilder(this.AppendSegmentToRequestUrl("contactFolders"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Photo.
        /// </summary>
        /// <returns>The <see cref="IProfilePhotoRequestBuilder"/>.</returns>
        public IProfilePhotoRequestBuilder Photo
        {
            get
            {
                return new ProfilePhotoRequestBuilder(this.AppendSegmentToRequestUrl("photo"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Drive.
        /// </summary>
        /// <returns>The <see cref="IDriveRequestBuilder"/>.</returns>
        public IDriveRequestBuilder Drive
        {
            get
            {
                return new DriveRequestBuilder(this.AppendSegmentToRequestUrl("drive"), this.Client);
            }
        }
        
        /// <summary>
        /// Gets the request builder for UserAssignLicense.
        /// </summary>
        /// <returns>The <see cref="IUserAssignLicenseRequestBuilder"/>.</returns>
        public IUserAssignLicenseRequestBuilder AssignLicense(
            AssignedLicense addLicenses,
            Guid removeLicenses)
        {
            return new UserAssignLicenseRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.assignLicense"),
                this.Client,
                addLicenses,
                removeLicenses);
        }

        /// <summary>
        /// Gets the request builder for UserChangePassword.
        /// </summary>
        /// <returns>The <see cref="IUserChangePasswordRequestBuilder"/>.</returns>
        public IUserChangePasswordRequestBuilder ChangePassword(
            string currentPassword = null,
            string newPassword = null)
        {
            return new UserChangePasswordRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.changePassword"),
                this.Client,
                currentPassword,
                newPassword);
        }

        /// <summary>
        /// Gets the request builder for UserSendMail.
        /// </summary>
        /// <returns>The <see cref="IUserSendMailRequestBuilder"/>.</returns>
        public IUserSendMailRequestBuilder SendMail(
            Message message,
            bool? saveToSentItems = null)
        {
            return new UserSendMailRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.sendMail"),
                this.Client,
                message,
                saveToSentItems);
        }

        /// <summary>
        /// Gets the request builder for UserReminderView.
        /// </summary>
        /// <returns>The <see cref="IUserReminderViewRequestBuilder"/>.</returns>
        public IUserReminderViewRequestBuilder ReminderView(
            string startDateTime,
            string endDateTime = null)
        {
            return new UserReminderViewRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.reminderView"),
                this.Client,
                startDateTime,
                endDateTime);
        }
    
    }
}
