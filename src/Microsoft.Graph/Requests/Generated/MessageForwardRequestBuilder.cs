// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.


namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;

    /// <summary>
    /// The type DriveItemDeltaRequestBuilder.
    /// </summary>
    public partial class MessageForwardRequestBuilder : BasePostMethodRequestBuilder<IMessageForwardRequest>, IMessageForwardRequestBuilder
    {
        /// <summary>
        /// Constructs a new <see cref="MessageForwardRequestBuilder"/>.
        /// </summary>
        /// <param name="requestUrl">The URL for the request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        /// <param name="comment">A comment parameter for the OData method call.</param>
        /// <param name="toRecipients">A toRecipients parameter for the OData method call.</param>
        public MessageForwardRequestBuilder(
            string requestUrl,
            IBaseClient client,
            string comment,
            IEnumerable<Recipient> toRecipients)
            : base(requestUrl, client)
        {
            SetParameter("comment", comment, true);
            SetParameter("toRecipients", toRecipients, true);
        }

        /// <summary>
        /// A method used by the base class to construct a request class instance.
        /// </summary>
        /// <param name="functionUrl">The request URL to </param>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>An instance of a specific request class.</returns>
        protected override IMessageForwardRequest CreateRequest(string functionUrl, IEnumerable<Option> options)
        {
            var request = new MessageForwardRequest(functionUrl, this.Client, options);

            if (HasParameter("comment"))
                request.RequestBody.Comment = GetParameter<string>("comment");

            if (HasParameter("toRecipients"))
                request.RequestBody.ToRecipients = GetParameter<IEnumerable<Recipient>>("toRecipients");

            return request;
        }
    }
}
