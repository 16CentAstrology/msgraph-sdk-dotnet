// ------------------------------------------------------------------------------
//  Copyright (c) 2016 Microsoft Corporation
//  
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//  
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.


namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;

    /// <summary>
    /// The type EventRequestBuilder.
    /// </summary>
    public partial class EventRequestBuilder : BaseRequestBuilder, IEventRequestBuilder
    {

        /// <summary>
        /// Constructs a new EventRequestBuilder.
        /// </summary>
        /// <param name="requestUrl">The URL for the built request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        public EventRequestBuilder(
            string requestUrl,
            IBaseClient client)
            : base(requestUrl, client)
        {
        }

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <returns>The built request.</returns>
        public IEventRequest Request()
        {
            return this.Request(null);
        }

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>The built request.</returns>
        public IEventRequest Request(IList<Option> options)
        {
            return new EventRequest(this.RequestUrl, this.Client, options);
        }
        
        /// <summary>
        /// Gets the request builder for Calendar.
        /// </summary>
        /// <returns>The <see cref="ICalendarRequestBuilder"/>.</returns>
        public ICalendarRequestBuilder Calendar
        {
            get
            {
                return new CalendarRequestBuilder(this.AppendSegmentToRequestUrl("calendar"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Instances.
        /// </summary>
        /// <returns>The <see cref="IInstancesCollectionRequestBuilder"/>.</returns>
        public IInstancesCollectionRequestBuilder Instances
        {
            get
            {
                return new InstancesCollectionRequestBuilder(this.AppendSegmentToRequestUrl("instances"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Attachments.
        /// </summary>
        /// <returns>The <see cref="IAttachmentsCollectionRequestBuilder"/>.</returns>
        public IAttachmentsCollectionRequestBuilder Attachments
        {
            get
            {
                return new AttachmentsCollectionRequestBuilder(this.AppendSegmentToRequestUrl("attachments"), this.Client);
            }
        }
        
        /// <summary>
        /// Gets the request builder for EventAccept.
        /// </summary>
        /// <returns>The <see cref="IEventAcceptRequestBuilder"/>.</returns>
        public IEventAcceptRequestBuilder Accept(
            string comment = null,
            bool? sendResponse = null)
        {
            return new EventAcceptRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.accept"),
                this.Client,
                comment,
                sendResponse);
        }

        /// <summary>
        /// Gets the request builder for EventDecline.
        /// </summary>
        /// <returns>The <see cref="IEventDeclineRequestBuilder"/>.</returns>
        public IEventDeclineRequestBuilder Decline(
            string comment = null,
            bool? sendResponse = null)
        {
            return new EventDeclineRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.decline"),
                this.Client,
                comment,
                sendResponse);
        }

        /// <summary>
        /// Gets the request builder for EventTentativelyAccept.
        /// </summary>
        /// <returns>The <see cref="IEventTentativelyAcceptRequestBuilder"/>.</returns>
        public IEventTentativelyAcceptRequestBuilder TentativelyAccept(
            string comment = null,
            bool? sendResponse = null)
        {
            return new EventTentativelyAcceptRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.tentativelyAccept"),
                this.Client,
                comment,
                sendResponse);
        }

        /// <summary>
        /// Gets the request builder for EventSnoozeReminder.
        /// </summary>
        /// <returns>The <see cref="IEventSnoozeReminderRequestBuilder"/>.</returns>
        public IEventSnoozeReminderRequestBuilder SnoozeReminder(
            DateTimeTimeZone newReminderTime)
        {
            return new EventSnoozeReminderRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.snoozeReminder"),
                this.Client,
                newReminderTime);
        }

        /// <summary>
        /// Gets the request builder for EventDismissReminder.
        /// </summary>
        /// <returns>The <see cref="IEventDismissReminderRequestBuilder"/>.</returns>
        public IEventDismissReminderRequestBuilder DismissReminder()
        {
            return new EventDismissReminderRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.dismissReminder"),
                this.Client);
        }
    
    }
}
