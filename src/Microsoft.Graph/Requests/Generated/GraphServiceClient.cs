// ------------------------------------------------------------------------------
//  Copyright (c) 2016 Microsoft Corporation
//  
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//  
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.


namespace Microsoft.Graph
{

    /// <summary>
    /// The type GraphServiceClient.
    /// </summary>
    public partial class GraphServiceClient : BaseClient, IGraphServiceClient
    {
        /// <summary>
        /// Instantiates a new GraphServiceClient.
        /// </summary>
        /// <param name="authenticationProvider">The <see cref="IAuthenticationProvider"/> for authenticating request messages.</param>
        /// <param name="httpProvider">The <see cref="IHttpProvider"/> for sending requests.</param>
        public GraphServiceClient(
            IAuthenticationProvider authenticationProvider,
            IHttpProvider httpProvider = null)
            : this("https://graph.microsoft.com/v1.0", authenticationProvider, httpProvider)
        {
        }

        /// <summary>
        /// Instantiates a new GraphServiceClient.
        /// </summary>
        /// <param name="baseUrl">The base service URL. For example, "https://graph.microsoft.com/v1.0."</param>
        /// <param name="authenticationProvider">The <see cref="IAuthenticationProvider"/> for authenticating request messages.</param>
        /// <param name="httpProvider">The <see cref="IHttpProvider"/> for sending requests.</param>
        public GraphServiceClient(
            string baseUrl,
            IAuthenticationProvider authenticationProvider,
            IHttpProvider httpProvider = null)
            : base(baseUrl, authenticationProvider, httpProvider)
        {
        }
    
        /// <summary>
        /// Gets the DirectoryObjects request builder.
        /// </summary>
        public IDirectoryObjectsCollectionRequestBuilder DirectoryObjects
        {
            get
            {
                return new DirectoryObjectsCollectionRequestBuilder(this.BaseUrl + "/directoryObjects", this);
            }
        }
    
        /// <summary>
        /// Gets the Devices request builder.
        /// </summary>
        public IDevicesCollectionRequestBuilder Devices
        {
            get
            {
                return new DevicesCollectionRequestBuilder(this.BaseUrl + "/devices", this);
            }
        }
    
        /// <summary>
        /// Gets the Groups request builder.
        /// </summary>
        public IGroupsCollectionRequestBuilder Groups
        {
            get
            {
                return new GroupsCollectionRequestBuilder(this.BaseUrl + "/groups", this);
            }
        }
    
        /// <summary>
        /// Gets the DirectoryRoles request builder.
        /// </summary>
        public IDirectoryRolesCollectionRequestBuilder DirectoryRoles
        {
            get
            {
                return new DirectoryRolesCollectionRequestBuilder(this.BaseUrl + "/directoryRoles", this);
            }
        }
    
        /// <summary>
        /// Gets the DirectoryRoleTemplates request builder.
        /// </summary>
        public IDirectoryRoleTemplatesCollectionRequestBuilder DirectoryRoleTemplates
        {
            get
            {
                return new DirectoryRoleTemplatesCollectionRequestBuilder(this.BaseUrl + "/directoryRoleTemplates", this);
            }
        }
    
        /// <summary>
        /// Gets the Organization request builder.
        /// </summary>
        public IOrganizationCollectionRequestBuilder Organization
        {
            get
            {
                return new OrganizationCollectionRequestBuilder(this.BaseUrl + "/organization", this);
            }
        }
    
        /// <summary>
        /// Gets the SubscribedSkus request builder.
        /// </summary>
        public ISubscribedSkusCollectionRequestBuilder SubscribedSkus
        {
            get
            {
                return new SubscribedSkusCollectionRequestBuilder(this.BaseUrl + "/subscribedSkus", this);
            }
        }
    
        /// <summary>
        /// Gets the Users request builder.
        /// </summary>
        public IUsersCollectionRequestBuilder Users
        {
            get
            {
                return new UsersCollectionRequestBuilder(this.BaseUrl + "/users", this);
            }
        }
    
        /// <summary>
        /// Gets the Drives request builder.
        /// </summary>
        public IDrivesCollectionRequestBuilder Drives
        {
            get
            {
                return new DrivesCollectionRequestBuilder(this.BaseUrl + "/drives", this);
            }
        }
    
        /// <summary>
        /// Gets the Me request builder.
        /// </summary>
        public IUserRequestBuilder Me
        {
            get
            {
                return new UserRequestBuilder(this.BaseUrl + "/me", this);
            }
        }
    
        /// <summary>
        /// Gets the Drive request builder.
        /// </summary>
        public IDriveRequestBuilder Drive
        {
            get
            {
                return new DriveRequestBuilder(this.BaseUrl + "/drive", this);
            }
        }
    
    }
}
