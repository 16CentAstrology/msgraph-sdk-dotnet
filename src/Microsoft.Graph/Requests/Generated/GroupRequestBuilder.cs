// ------------------------------------------------------------------------------
//  Copyright (c) 2016 Microsoft Corporation
//  
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//  
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.


namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;

    /// <summary>
    /// The type GroupRequestBuilder.
    /// </summary>
    public partial class GroupRequestBuilder : BaseRequestBuilder, IGroupRequestBuilder
    {

        /// <summary>
        /// Constructs a new GroupRequestBuilder.
        /// </summary>
        /// <param name="requestUrl">The URL for the built request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        public GroupRequestBuilder(
            string requestUrl,
            IBaseClient client)
            : base(requestUrl, client)
        {
        }

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <returns>The built request.</returns>
        public IGroupRequest Request()
        {
            return this.Request(null);
        }

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>The built request.</returns>
        public IGroupRequest Request(IList<Option> options)
        {
            return new GroupRequest(this.RequestUrl, this.Client, options);
        }
        
        /// <summary>
        /// Gets the request builder for Members.
        /// </summary>
        /// <returns>The <see cref="IMembersCollectionWithReferencesRequestBuilder"/>.</returns>
        public IMembersCollectionWithReferencesRequestBuilder Members
        {
            get
            {
                return new MembersCollectionWithReferencesRequestBuilder(this.AppendSegmentToRequestUrl("members"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for MemberOf.
        /// </summary>
        /// <returns>The <see cref="IMemberOfCollectionWithReferencesRequestBuilder"/>.</returns>
        public IMemberOfCollectionWithReferencesRequestBuilder MemberOf
        {
            get
            {
                return new MemberOfCollectionWithReferencesRequestBuilder(this.AppendSegmentToRequestUrl("memberOf"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for CreatedOnBehalfOf.
        /// </summary>
        /// <returns>The <see cref="IDirectoryObjectWithReferencesRequestBuilder"/>.</returns>
        public IDirectoryObjectWithReferencesRequestBuilder CreatedOnBehalfOf
        {
            get
            {
                return new DirectoryObjectWithReferencesRequestBuilder(this.AppendSegmentToRequestUrl("createdOnBehalfOf"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Owners.
        /// </summary>
        /// <returns>The <see cref="IOwnersCollectionWithReferencesRequestBuilder"/>.</returns>
        public IOwnersCollectionWithReferencesRequestBuilder Owners
        {
            get
            {
                return new OwnersCollectionWithReferencesRequestBuilder(this.AppendSegmentToRequestUrl("owners"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Threads.
        /// </summary>
        /// <returns>The <see cref="IThreadsCollectionRequestBuilder"/>.</returns>
        public IThreadsCollectionRequestBuilder Threads
        {
            get
            {
                return new ThreadsCollectionRequestBuilder(this.AppendSegmentToRequestUrl("threads"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Calendar.
        /// </summary>
        /// <returns>The <see cref="ICalendarRequestBuilder"/>.</returns>
        public ICalendarRequestBuilder Calendar
        {
            get
            {
                return new CalendarRequestBuilder(this.AppendSegmentToRequestUrl("calendar"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for CalendarView.
        /// </summary>
        /// <returns>The <see cref="ICalendarViewCollectionRequestBuilder"/>.</returns>
        public ICalendarViewCollectionRequestBuilder CalendarView
        {
            get
            {
                return new CalendarViewCollectionRequestBuilder(this.AppendSegmentToRequestUrl("calendarView"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Events.
        /// </summary>
        /// <returns>The <see cref="IEventsCollectionRequestBuilder"/>.</returns>
        public IEventsCollectionRequestBuilder Events
        {
            get
            {
                return new EventsCollectionRequestBuilder(this.AppendSegmentToRequestUrl("events"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Conversations.
        /// </summary>
        /// <returns>The <see cref="IConversationsCollectionRequestBuilder"/>.</returns>
        public IConversationsCollectionRequestBuilder Conversations
        {
            get
            {
                return new ConversationsCollectionRequestBuilder(this.AppendSegmentToRequestUrl("conversations"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Photo.
        /// </summary>
        /// <returns>The <see cref="IProfilePhotoRequestBuilder"/>.</returns>
        public IProfilePhotoRequestBuilder Photo
        {
            get
            {
                return new ProfilePhotoRequestBuilder(this.AppendSegmentToRequestUrl("photo"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for AcceptedSenders.
        /// </summary>
        /// <returns>The <see cref="IAcceptedSendersCollectionRequestBuilder"/>.</returns>
        public IAcceptedSendersCollectionRequestBuilder AcceptedSenders
        {
            get
            {
                return new AcceptedSendersCollectionRequestBuilder(this.AppendSegmentToRequestUrl("acceptedSenders"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for RejectedSenders.
        /// </summary>
        /// <returns>The <see cref="IRejectedSendersCollectionRequestBuilder"/>.</returns>
        public IRejectedSendersCollectionRequestBuilder RejectedSenders
        {
            get
            {
                return new RejectedSendersCollectionRequestBuilder(this.AppendSegmentToRequestUrl("rejectedSenders"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Drive.
        /// </summary>
        /// <returns>The <see cref="IDriveRequestBuilder"/>.</returns>
        public IDriveRequestBuilder Drive
        {
            get
            {
                return new DriveRequestBuilder(this.AppendSegmentToRequestUrl("drive"), this.Client);
            }
        }
        
        /// <summary>
        /// Gets the request builder for GroupSubscribeByMail.
        /// </summary>
        /// <returns>The <see cref="IGroupSubscribeByMailRequestBuilder"/>.</returns>
        public IGroupSubscribeByMailRequestBuilder SubscribeByMail()
        {
            return new GroupSubscribeByMailRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.subscribeByMail"),
                this.Client);
        }

        /// <summary>
        /// Gets the request builder for GroupUnsubscribeByMail.
        /// </summary>
        /// <returns>The <see cref="IGroupUnsubscribeByMailRequestBuilder"/>.</returns>
        public IGroupUnsubscribeByMailRequestBuilder UnsubscribeByMail()
        {
            return new GroupUnsubscribeByMailRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.unsubscribeByMail"),
                this.Client);
        }

        /// <summary>
        /// Gets the request builder for GroupAddFavorite.
        /// </summary>
        /// <returns>The <see cref="IGroupAddFavoriteRequestBuilder"/>.</returns>
        public IGroupAddFavoriteRequestBuilder AddFavorite()
        {
            return new GroupAddFavoriteRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.addFavorite"),
                this.Client);
        }

        /// <summary>
        /// Gets the request builder for GroupRemoveFavorite.
        /// </summary>
        /// <returns>The <see cref="IGroupRemoveFavoriteRequestBuilder"/>.</returns>
        public IGroupRemoveFavoriteRequestBuilder RemoveFavorite()
        {
            return new GroupRemoveFavoriteRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.removeFavorite"),
                this.Client);
        }

        /// <summary>
        /// Gets the request builder for GroupResetUnseenCount.
        /// </summary>
        /// <returns>The <see cref="IGroupResetUnseenCountRequestBuilder"/>.</returns>
        public IGroupResetUnseenCountRequestBuilder ResetUnseenCount()
        {
            return new GroupResetUnseenCountRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.resetUnseenCount"),
                this.Client);
        }
    
    }
}
